#!/usr/bin/env php
<?php

function term($msg, $status = 0)
{
    echo $msg."\n";
    exit($status);
}

function checkSyntax($fileName, $json)
{
    $required = array(
        "class", "table", "dontLog", "ignoreCodeCoverage", "description", "author", "email", "license", "use", "fields", "preIncludeFile", "postIncludeFile"
    );

    $fieldRequired = array(
        "name", "type", "class", "description", "primary", "notnull", "transform_no_html", "dont_log"
    );

    $fieldTypes = array(
        "BooleanField", "CharField", "DateTimeField", "ForeignKey", "IntegerField", "TextField"
    );

    $error = 0;

    foreach ($required as $req) {
        if (!array_key_exists($req, $json)) {
            echo $fileName.": Required element ".$req." is missing.\n";
            $error++;
        }
    }

    $pk = 0;

    foreach ($json['fields'] as $field) {
        if ($field['primary']) {
            $pk++;
        }
    }

    if ($pk > 1) {
        echo $fileName."/".$field.": More than 1 field is declared as primary (if no fields are declared, ID is assumed).\n";
        $error++;
    }

    foreach ($json['fields'] as $field) {
        if ($field['name'] == 'id' && $pk == 0) {
            echo $fileName."/".$field.": You do not need to define id as it automatically created in the dblayer if no other primary key is set.\n";
            $error++;
        }

        if ($field['name'] == 'deleted') {
            echo $fileName."/".$field.": This is a reserved field name.\n";
            $error++;
        }

        foreach ($fieldRequired as $req) {
            if (!array_key_exists($req, $field)) {
                echo $fileName."/".$field.": Required element ".$req." is missing.\n";
                $error++;
            }
        }

        if (!in_array($field['type'], $fieldTypes)) {
            echo $fileName."/".$field.": Invalid type ".$field['type'].".\n";
            $error++;
        }

        if ($field['class'] && $field['type'] != "ForeignKey") {
            echo $fileName."/".$field.": Only set field class if a ForeignKey field.\n";
            $error++;
        }

        if (!$field['class'] && $field['type'] == "ForeignKey") {
            echo $fileName."/".$field.": Must set field class if a ForeignKey field.\n";
            $error++;
        }
    }

    if ($json['preIncludeFile'] && !file_exists(__DIR__ . '/includes/'.$json['class'].'Pre.php')) {
        echo $fileName.": Include file specified but is not present (looking for ".__DIR__ . "/includes/".$json['class']."Pre.php).\n";
        $error++;
    }

    if ($json['postIncludeFile'] && !file_exists(__DIR__ . '/includes/'.$json['class'].'Post.php')) {
        echo $fileName.": Include file specified but is not present (looking for ".__DIR__ . "/includes/".$json['class']."Post.php).\n";
        $error++;
    }

    if (($json['preIncludeFile'] || $json['postIncludeFile']) && !$json['ignoreCodeCoverage']) {
        echo $fileName.": You may not opt the file out of code coverage statistics if an include file is used.\n";
        $error++;
    }

    return $error;
}

function makeFile($json)
{
    $json['use'][] = 'FelixOnline\Base\BaseDB';
    $json['use'][] = 'FelixOnline\Base\BaseManager';
    $json['use'][] = 'FelixOnline\Base\Type';
    $json['use'][] = 'FelixOnline\Base\App';
    $json['use'][] = 'FelixOnline\Exceptions\InternalException';

    $pk = 'id';

    foreach ($json['fields'] as $field) {
        if ($field['primary']) {
            $pk = $field['name'];
        }
    }

    $string = array();
    $string[] = "<?php";
    $string[] = "namespace FelixOnline\Core;";
    $string[] = '';
    $string[] = '// THIS FILE IS AUTOMATICALLY GENERATED';
    $string[] = '// To modify, use the Model Builder located in the "build" directory.';
    $string[] = '';

    foreach ($json['use'] as $use) {
        $string[] = 'use '.$use.';';
    }
    $string[] = '';

    $string[] = '/**';
    $string[] = ' * '.$json['description'];
    $string[] = ' *';
    $string[] = ' * Fields:';

    foreach ($json['fields'] as $field) {
        $string[] = ' * - '.$field['name'].': ('.$field['type'].') '.$field['description'];
    }

    if ($pk == 'id') {
        $string[] = ' * - id: (IntegerField) this primary key is automatically added by the database layer.';
    }
    $string[] = ' * - deleted: (BooleanField) this indicates if the database layer should not load this record (soft deletion) and this field is automatically added by the database layer.';

    $string[] = ' *';
    $string[] = ' * @author '.$json['author'].' <'.$json['email'].'>';
    $string[] = ' * @license '.$json['license'];

    if ($json['ignoreCodeCoverage']) {
        $string[] = ' * @codeCoverageIgnore';
    }

    if ($pk == 'id') {
        $type = 'int';
    } else {
        $type = 'char'; // FIXME, this is not ideal
    }

    $string[] = ' */';
    $string[] = 'class '.$json['class'].' extends BaseDB';
    $string[] = '{';
    $string[] = '    /**';
    $string[] = '     * @var char $dbtable Table to reference.';
    $string[] = '     */';
    $string[] = '    public $dbtable = \''.$json['table'].'\';';

    if ($json['preIncludeFile']) {
        $string[] = '';
        $string[] = file_get_contents(__DIR__ . '/includes/'.$json['name'].'Pre.php');
    }

    $string[] = '';
    $string[] = '    /**';
    $string[] = '     * Constructor: prepares a new instance of this model.';
    $string[] = '     *';
    $string[] = '     * @param '.$type.' $'.$pk.' If specified, fetch record with this primary key from the database. If not specified, a new empty record is generated.';
    $string[] = '     *';
    $string[] = '     * @throws FelixOnline\Exceptions\InternalException if definition is incorrectly configured.';
    $string[] = '     * @throws FelixOnline\Exceptions\ModelNotFoundException if primary key specified and the associated record has been deleted or is not present.';
    $string[] = '     */';
    $string[] = '    public function __construct($'.$pk.' = null)';
    $string[] = '    {';
    $string[] = '        $fields = array(';

    foreach ($json['fields'] as $field) {
        if ($field['primary'] || $field['notnull'] || $field['transform_no_html'] || $field['dont_log']) {
            if ($field['class']) {
                $string[] = '            \''.$field['name'].'\' => new Type\\'.$field['type'].'(\''.$field['class'].'\', array(';
            } else {
                $string[] = '            \''.$field['name'].'\' => new Type\\'.$field['type'].'(array(';
            }

            if ($field['primary']) {
                $string[] = '                "primary" => true,';
            }

            if ($field['notnull']) {
                $string[] = '                "null" => false,';
            }

            if ($field['dont_log']) {
                $string[] = '                "dont_log" => true,';
            }

            if ($field['transform_no_html']) {
                $string[] = '                "transformers" => array(';
                $string[] = '                    Type\\BaseType::TRANSFORMER_NO_HTML';
                $string[] = '                ),';
            }

            $string[] = '            )),';
        } elseif ($field['class']) {
            $string[] = '            \''.$field['name'].'\' => new Type\\'.$field['type'].'(\''.$field['class'].'\'),';
        } else {
            $string[] = '            \''.$field['name'].'\' => new Type\\'.$field['type'].'(),';
        }
    }

    $string[] = '        );';
    $string[] = '';

    $dontLog = "false";

    if ($json['dontLog']) {
        $dontLog = "true";
    }

    $string[] = '        parent::__construct($fields, $id, null, '.$dontLog.');';

    $string[] = '    }';

    if ($json['postIncludeFile']) {
        $string[] = '';
        $string[] = file_get_contents(__DIR__ . '/includes/'.$json['name'].'Post.php');
    }

    $string[] = '}';
    $string[] = '';

    file_put_contents(__DIR__ . '/built/'.$json['class'].'.php', implode($string, PHP_EOL));
}

if (php_sapi_name() !== "cli") {
    term("Run from CLI only.", 64);
}

echo "Model Builder\n";
echo "Step 1: Checking JSON... ";

$files = glob(__DIR__ . '/definitions/*.json');

if (!$files || count($files) == 0) {
    term('Could not find any files in the definitions folder.', 64);
}

$error = 0;

foreach ($files as $file) {
    $data = json_decode(file_get_contents($file), true);

    if (!$data) {
        echo $file.": Cannot read JSON (check syntax)\n";
        $error++;
        continue;
    }

    $error += checkSyntax($file, $data);
}

if ($error) {
    term('Please fix the errors above and try again.', 4);
}

echo "OK\n";

echo "Step 2: Building files... ";

foreach ($files as $file) {
    $data = json_decode(file_get_contents($file), true);

    makeFile($data);
}

echo "OK\n";

term("All done!", 0);
